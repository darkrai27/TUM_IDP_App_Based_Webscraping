from functools import singledispatch
import requests
from pydantic import Json
from time import sleep
import json
import os
from dotenv import load_dotenv

headers = {
  'authority': 'www.threads.net',
  'accept': '*/*',
  'accept-language': 'es-ES,es;q=0.7',
  'content-type': 'application/x-www-form-urlencoded',
  'origin': 'https://www.threads.net',
  'referer': 'https://www.threads.net/search',
  'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Brave";v="116"',
  'sec-ch-ua-mobile': '?0',
  'sec-ch-ua-model': '""',
  'sec-ch-ua-platform': '"macOS"',
  'sec-ch-ua-platform-version': '"13.4.0"',
  'sec-fetch-dest': 'empty',
  'sec-fetch-mode': 'cors',
  'sec-fetch-site': 'same-origin',
  'sec-gpc': '1',
  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'
}

load_dotenv('.env')

def search_users(query: str, n: int = 100, delay: float = 1, dtsg: str = None, session_id: str = None) -> Json:
  '''
  Searches user by the specified query.

  Args:
    query (str): text to look users for. Potentially usernames or complete names.
    dtsg (str): Value generated by Meta to validated the session
    session_id (str): Cookie identifier for the user session

  Returns:
    List[User]: List of most relevant results and suggestions matching the query
  '''

  if dtsg == None:
    dtsg = os.getenv("DTSG")
  
  if session_id == None:
    session_id = os.getenv("SESSION")
  
  cookies = {
    'sessionid': session_id,
  }

  data = {
    'fb_dtsg': dtsg,
    'variables': f'{{"query":"{query}","first":10,"__relay_internal__pv__BarcelonaIsLoggedInrelayprovider":true}}',
    'doc_id': '6808556062536949',
  }

  response = requests.post('https://www.threads.net/api/graphql', cookies=cookies, headers=headers, data=data)

  if response.status_code == 200:
    print(response.text)
    return json.loads(response.text)['data']['xdt_api__v1__users__search_connection']['edges']
  

def search_posts(query: str, tagID: int = None, n: int = 100, delay: float = 1, dtsg: str = None, session_id: str = None) -> Json:
  '''
  Performs a search of posts matching the query or posted by users whose username
  matches the query. If tagID is specified, it will perform a search by the tag or "hashtag"

  Args:
    query (str): Search query.
    tagID (int, optional): Tag identifier to filter the search. Defaults to None.
    dtsg (str): Value generated by Meta to validated the session
    session_id (str): Cookie identifier for the user session
    n (int, optional): Maximum amount of posts to search for. Defaults to 10.
    delay (int, optional): Delay between requests in seconds. Defaults to 5.

  Returns:
    Json (ThreadsData): List of nodes containing the most relevant threads results matching the query.
  '''

  if dtsg == None:
    dtsg = os.getenv("DTSG")
  
  if session_id == None:
    session_id = os.getenv("SESSION")
  
  cookies = {
    'sessionid': session_id,
  }

  data = {
    'fb_dtsg': dtsg,
    'doc_id': '7218474308202984',
  }

  if tagID != None:
    data['variables'] = f'{{"query":"{query}","tagID":"{tagID}","__relay_internal__pv__BarcelonaIsFirstPostContextLineEnabledrelayprovider":false,"__relay_internal__pv__BarcelonaIsLoggedInrelayprovider":true,"__relay_internal__pv__BarcelonaIsViewCountEnabledrelayprovider":false}}'
  else:
   data['variables'] = f'{{"query":"Champions League","__relay_internal__pv__BarcelonaIsFirstPostContextLineEnabledrelayprovider":false,"__relay_internal__pv__BarcelonaIsLoggedInrelayprovider":true,"__relay_internal__pv__BarcelonaIsViewCountEnabledrelayprovider":false}}'

  response = requests.post('https://www.threads.net/api/graphql', cookies=cookies, headers=headers, data=data)

  if response.status_code == 200:
    response = json.loads(response.text)
    edges = response['data']['searchResults']['edges']

    cursor = None
    try: 
      cursor = response["data"]["searchResults"]["page_info"]["end_cursor"]
    except:
      print("Cursor not found")
    
    if n > 0:
      n -= len(response["data"]["searchResults"]["edges"])
    while (n > 0 or n == -1) and cursor != None:
      if tagID:
        data['variables'] = '{"query":"Champions League","tagID":"18403354339029204","__relay_internal__pv__BarcelonaIsFirstPostContextLineEnabledrelayprovider":false,"__relay_internal__pv__BarcelonaIsLoggedInrelayprovider":true,"__relay_internal__pv__BarcelonaIsViewCountEnabledrelayprovider":false}' #f'{{"after":"{cursor}","before":null,"first":50,"last":null,"query":"{query}","tagID":"{tagID}","__relay_internal__pv__BarcelonaIsFirstPostContextLineEnabledrelayprovider":false,"__relay_internal__pv__BarcelonaIsLoggedInrelayprovider":true,"__relay_internal__pv__BarcelonaIsViewCountEnabledrelayprovider":false}}'
      else:
        data['variables'] = f'{{"after":"{cursor}","before":null,"first":50,"last":null,"query":"{query}","__relay_internal__pv__BarcelonaIsFirstPostContextLineEnabledrelayprovider":false,"__relay_internal__pv__BarcelonaIsLoggedInrelayprovider":true,"__relay_internal__pv__BarcelonaIsViewCountEnabledrelayprovider":false}}'

      response = requests.post('https://www.threads.net/api/graphql', cookies=cookies, headers=headers, data=data)
      response = json.loads(response.text)
      cursor = response["data"]["searchResults"]["page_info"]["end_cursor"]
      
      if len(response["data"]["searchResults"]["edges"]) > 0:
        edges.extend(response["data"]["searchResults"]["edges"])
      else:
        break

      if n > 0:
        n -= len(response["data"]["searchResults"]["edges"])
      sleep(delay)
    
    return edges